{"version":3,"sources":["img/vs.png","components/Navbar.js","api/Api.js","components/MyCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","AppBar","color","position","Toolbar","IconButton","Typography","variant","API_KEY","MyCard","match","useState","details","setDetails","dialog_open","setDialog","showDetails","id","url","fetch","then","response","json","catch","err","console","log","MatchDetails","data","handle_open","handle_close","Card","style","marginTop","CardContent","Grid","container","justify","spacing","alignItems","item","width","src","require","alt","CardActions","Button","onClick","unique_id","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","matchStarted","score","DialogActions","App","matches","setMatches","setError","React","useEffect","getMatches","className","CircularProgress","sm","map","key","type","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,gC,oKCiB5BC,EAbA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,YAAYC,SAAS,SACjC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYH,MAAM,WAChB,kBAAC,IAAD,OAEF,kBAACI,EAAA,EAAD,CAAYC,QAAQ,MAApB,iB,wECXFC,EAAU,+BCuHDC,EAtGA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACEC,mBAAS,IADX,mBACrBC,EADqB,KACZC,EADY,OAEKF,oBAAS,GAFd,mBAErBG,EAFqB,KAERC,EAFQ,KAGtBC,EAAc,SAACC,IDTF,SAACA,GACpB,IAAMC,EAAG,sDAAkDV,EAAlD,sBAAuES,GAChF,OAAOE,MAAMD,GACVE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,QAASF,OCMrCG,CAAaV,GACVG,MAAK,SAACQ,GACLH,QAAQC,IAAI,aAAcE,GAC1Bf,EAAWe,GACXC,OAEDN,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,QAASF,OAEnCM,EAAe,WACnBf,GAAU,IAENc,EAAc,WAClBd,GAAU,IA8EZ,OACE,kBAAC,WAAD,KA1EE,kBAACgB,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,KACxB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,EAAGC,WAAW,UACtD,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACR,kBAAClC,EAAA,EAAD,CAAYC,QAAQ,MAAMG,EAAM,YAElC,kBAACyB,EAAA,EAAD,CAAMK,MAAI,GACR,yBACER,MAAO,CAAES,MAAO,IAChBC,IAAKC,EAAQ,IACbC,IAAI,MAGR,kBAACT,EAAA,EAAD,CAAMK,MAAI,GACR,kBAAClC,EAAA,EAAD,CAAYC,QAAQ,MAAMG,EAAM,cAItC,kBAACmC,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACS,EAAA,EAAD,CACEN,MAAI,EACJO,QAAS,WACP/B,EAAYN,EAAMsC,YAEpBzC,QAAQ,WACRL,MAAM,aANR,gBAUA,kBAAC4C,EAAA,EAAD,CACEN,MAAI,EACJR,MAAO,CAAEiB,WAAY,GACrB1C,QAAQ,WACRL,MAAM,WAJR,cAMc,IAAIgD,KAAKxC,EAAMyC,aAAaC,qBAUhD,kBAACC,EAAA,EAAD,CAAQC,KAAMxC,EAAayC,QAASzB,GAClC,kBAAC0B,EAAA,EAAD,CAAavC,GAAG,sBAAsB,mBACtC,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmBzC,GAAG,4BACpB,kBAACX,EAAA,EAAD,KAAaM,EAAQ+C,MACrB,kBAACrD,EAAA,EAAD,aAEE,0BAAM0B,MAAO,CAAE4B,UAAW,SAAUC,WAAY,SAC7CjD,EAAQkD,aAAe,UAAY,sBAGxC,kBAACxD,EAAA,EAAD,aAEE,0BAAM0B,MAAO,CAAE4B,UAAW,SAAUC,WAAY,SAC7CjD,EAAQmD,UAKjB,kBAACC,EAAA,EAAD,KACE,kBAAClB,EAAA,EAAD,CAAQC,QAASjB,EAAc5B,MAAM,WAArC,aC/DK+D,MAlCf,WAAgB,IAAD,EACmBtD,oBAAS,GAD5B,gCAEkBA,mBAAS,KAF3B,mBAEJuD,EAFI,KAEIC,EAFJ,OAGUxD,mBAAS,IAHnB,mBAGFyD,GAHE,aAIkBC,IAAM1D,SAAS,GAJjC,mBAWX,OAXW,UAOX2D,qBAAU,YFZK,WACjB,IAAMpD,EAAG,iDAA6CV,GAEtD,OAAOW,MAAMD,GACVE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,QAASF,OES7B+C,GAAanD,MAAK,SAACQ,GAAD,OAAQuC,EAAWvC,EAAKsC,YAAU3C,OAAM,SAAAC,GAAG,OAAE4C,EAAS5C,QAC9E,IAEE,yBAAKgD,UAAU,OAEvB,kBAAC,EAAD,MACA,kBAAClE,EAAA,EAAD,CAAYC,QAAQ,KAAKyB,MAAO,CAACC,UAAU,EAAE/B,MAAM,UAAnD,qBACA,kBAACuE,EAAA,EAAD,CAAkBlE,QAAQ,WAC1B,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAMK,MAAI,EAACkC,GAAG,MACd,kBAACvC,EAAA,EAAD,CAAMK,MAAI,EAACkC,GAAG,KAEdR,EAAQS,KAAI,SAACjE,GAAD,OACV,kBAAC,WAAD,CAAUkE,IAAKlE,EAAMsC,YACftC,EAAMmE,KAAK,YAAgB,kBAAC,EAAD,CAAQD,IAAKlE,EAAMsC,UAAWtC,MAAOA,IAAW,WClBnEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvE,MACvB,2DCZNwE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdpE,OAAM,SAAAqE,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.baae3aa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vs.27b23a52.png\";","import { AppBar, Toolbar, Typography, IconButton } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <AppBar color=\"secondary\" position=\"fixed\">\r\n      <Toolbar>\r\n        <IconButton color=\"inherit\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\">Live Score</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const API_KEY = \"Lxjenw9nr8YpE5fzVXSj0Z4vFRE3\";\r\n\r\nconst getMatches = () => {\r\n  const url = `https://cricapi.com/api/matches?apikey=${API_KEY}`;\r\n\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .catch((err) => console.log(\"ERROR\", err));\r\n};\r\n\r\n//load Specific Match Details\r\nconst MatchDetails = (id) => {\r\n  const url = `https://cricapi.com/api/cricketScore?apikey=${API_KEY}&unique_id=${id}`;\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .catch((err) => console.log(\"ERROR\", err));\r\n};\r\n\r\nexport { getMatches, MatchDetails };\r\n","import React, { useState, Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Grid,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogContentText,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nimport { MatchDetails } from \"../api/Api\";\r\n\r\nconst MyCard = ({ match }) => {\r\n  const [details, setDetails] = useState({});\r\n  const [dialog_open, setDialog] = useState(false);\r\n  const showDetails = (id) => {\r\n    MatchDetails(id)\r\n      .then((data) => {\r\n        console.log(\"MATCH DATA\", data);\r\n        setDetails(data);\r\n        handle_open();\r\n      })\r\n      .catch((err) => console.log(\"ERROR\", err));\r\n  };\r\n  const handle_close = () => {\r\n    setDialog(false);\r\n  };\r\n  const handle_open = () => {\r\n    setDialog(true);\r\n  };\r\n\r\n  const getMyCard = () => {\r\n    return (\r\n      <Card style={{ marginTop: 15 }}>\r\n        <CardContent>\r\n          <Grid container justify=\"center\" spacing={4} alignItems=\"center\">\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-1\"]}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <img\r\n                style={{ width: 85 }}\r\n                src={require(\"../img/vs.png\")}\r\n                alt=\"\"\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{match[\"team-2\"]}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Grid container justify=\"center\">\r\n            <Button\r\n              item\r\n              onClick={() => {\r\n                showDetails(match.unique_id);\r\n              }}\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n            >\r\n              Show Details\r\n            </Button>\r\n            <Button\r\n              item\r\n              style={{ marginLeft: 5 }}\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n            >\r\n              Start Time {new Date(match.dateTimeGMT).toLocaleString()}\r\n            </Button>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  const getDialog = () => {\r\n    return (\r\n      <Dialog open={dialog_open} onClose={handle_close}>\r\n        <DialogTitle id=\"alert-dialog-title\">{\"MATCH DETAILS..\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <Typography>{details.stat}</Typography>\r\n            <Typography>\r\n              Match\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {details.matchStarted ? \"Started\" : \"Still Not Started\"}\r\n              </span>\r\n            </Typography>\r\n            <Typography>\r\n              Score\r\n              <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                {details.score}\r\n              </span>\r\n            </Typography>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handle_close} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {getMyCard()}\r\n      {getDialog()}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n","import React,{Fragment, useEffect,useState} from 'react';\nimport {Grid,Typography,CircularProgress} from '@material-ui/core'\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport MyCard from './components/MyCard'\nimport {getMatches} from './api/Api'\n\nfunction App() {\n    const [isLoading,setLoadin] = useState(false)\n    const [matches,setMatches] = useState([])\nconst [error,setError] = useState(\"\")\n const [progress, setProgress] = React.useState(0);\n\n \n    useEffect(()=>{\n       \n            getMatches().then((data)=>setMatches(data.matches)).catch(err=>setError(err))\n    },[])\n    return ( \n        <div className=\"App\">\n         \n<Navbar/>\n<Typography variant=\"h5\" style={{marginTop:5,color:\"white\"}}> Live Scoring App</Typography>\n<CircularProgress variant=\"static\"  />\n<Grid container>\n    <Grid item sm=\"3\"></Grid>\n    <Grid item sm=\"6\">\n        {\n    matches.map((match)=>\n      <Fragment key={match.unique_id} >\n          {(match.type=\"Twenty20\") ?   <MyCard key={match.unique_id} match={match}/> : ''}\n      </Fragment>\n    )\n}\n        </Grid>    \n</Grid>\n\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}